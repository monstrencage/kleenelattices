{"name":"Kleenelattices","tagline":"Library and tools to compare identity-free regular expressions with intersection.","body":"Kleenelattices\r\n==============\r\n\r\nLibrary and tools to compare identity-free regular expressions with intersection.\r\n\r\n## Required\r\nTo compile and run this program you need OCaml version 4.00 or higher.\r\n\r\n## Installation\r\nTo compile a bytecode executable, enter in a shell in the source folder :\r\n```shell\r\n$ make\r\n```\r\n\r\nFor an optimized version type :\r\n```shell\r\n$ make opt\r\n```\r\n\r\nIf you want to produce a library, the command :\r\n```shell\r\n$ make libs\r\n```\r\n\r\nYou can find the complete documentation of the project [there](http://monstrencage.github.io/kleenelattices/doc/solve.html).\r\n\r\nYou can also install both the libraries and the executable program :\r\n```shell\r\n$ make install\r\n```\r\n\r\n## Use :\r\nA typical input file would look like this\r\n```\r\n<expr1> <cmp> <expr2>\r\n<expr3> <cmp> <expr4>\r\n<expr5> <cmp> <expr6>\r\n```\r\nwhere an expression can use strings as variables/letters, and the operations :\r\n* `<expr1> | <expr2>` : the set union\r\n* `<expr1> & <expr2>` : the set intersection\r\n* `<expr1> . <expr2>` : the composition of relations\r\n* `<expr1>+` : the transitive closure of a relation.\r\n\r\nYou can also use brackets `(...)`.\r\nThe valid comparaisons `<cmp>` are :\r\n* `<=` : loose inclusion\r\n* `>=` : converse of the loose inclusion\r\n* `<` : strict inclusion\r\n* `>` : converse of the strict inclusion\r\n* `=` : equality\r\n* `=\\=` : negation of the equality\r\n* `<>` : means that the two expressions are incomparable, *i.e.* neither one of them is included in the other.\r\n\r\n\r\nIf `file` is a correct input file, then calling\r\n```shell\r\n$ ./solve file\r\n```\r\nwill produce a file `file.res` in which each (in)equation will have been tested and solved.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}